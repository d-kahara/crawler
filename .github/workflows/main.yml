# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install pipenv
        uses: dschep/install-pipenv-action@v1

      - name: Cache Pipenv virtualenv
        uses: actions/cache@v1
        id: pipenv-cache
        with:
          path: ~/.pipenv
          key: ${{ runner.os }}-pipenv-v2-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-v2-

      - name: Install Dependencies
        env:
          PIPENV_NOSPIN: 'true'
          WORKON_HOME: ~/.pipenv/virtualenvs
          PIPENV_CACHE_DIR: ~/.pipenv/pipcache
        run: pipenv install --dev
        if: steps.pipenv-cache.outputs.cache-hit != 'true'

      - name: Test with pytest
        env:
          PIPENV_NOSPIN: 'true'
          WORKON_HOME: ~/.pipenv/virtualenvs
          REDIS_HOST: localhost
          REDIS_PORT: ${{ job.services.redis.ports[6379] }}
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/test_db'
          DJANGO_SECRET_KEY: 'KEY'
          DJANGO_SETTINGS_MODULE: CONFIG'
          PYTHONPATH: '.'
          DJANGO_DEBUG: 'False'
        run: |
          pipenv run python manage.py migrate --noinput
